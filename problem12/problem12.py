# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten tems would be:
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55,...
#
# Let us list the factors of the first seven triangle numbers:
# 1: 1
# 3: 1, 3
# 6: 1, 2, 3, 6
# 10: 1, 2, 5, 10
# 15: 1, 3, 5, 15
# 21: 1, 3, 7, 21
# 28: 1, 2, 4, 7, 14, 28
#
# We can see that 28 is the first triangle to have over five divisors.
#
# What is the value of the fisrt triangle number to have over five hundred divisors?
#
# ----------------------------------------------------------------------------------
#
# Notes:
# Tasks:
# 1. Write a way to generate triangle numbers
# 2. Write a way to determine the factors of a given number
# 3. For each number, create a list of the factors
# 4. Find a triangle number which has over 500 divisors
# 5. Ideally, write a way to write the output of each of these functions so they don't have to be recalculated each time the program is run.

# Create the triangle numbers file:


def triangle_writer():
    triangles_store = open("triangles", "w")
    output_numbers = []

    target_number = int(
        input(
            "Starting from 1, how many triangle numbers would you like to calculate: "
        )
    )

    # Triangle number formula: n(n+1)/2

    for n in range(1, target_number):
        output_numbers.append(int(n * (n + 1) / 2))

    for number in output_numbers:
        triangles_store.write(str(number) + "\n")

    triangles_store.close()


def calculate_factors(number):
    factors = []
    for i in range(1, number + 1):
        if number % i == 0:
            factors.append(i)
    return factors


def number_of_factors(factors):
    return len(factors)


def main():
    # triangle_writer()
    factors_test_number = int(input("How many factors are you looking for: "))
    with open("triangles", "r") as triangles_file:
        for line in triangles_file:
            number = int(line.strip())
            factors = calculate_factors(number)
            print(f"Number of factors of {number}: {number_of_factors(factors)}")
            if number_of_factors(factors) >= factors_test_number:
                print(f"{number} has {number_of_factors(factors)} factors")
                break


if __name__ == "__main__":
    main()
